<?php

namespace YajTech\Crud\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Str;
use YajTech\Crud\Helper\FieldFormatHelper;
use YajTech\Crud\Services\CrudService;

class GenerateCrudCommand extends Command
{
    /** Read Me
     *
     * --disable="migration,model,create_request,update_request,list_resource,detail_resource,controller,route" ----- optional
     * --fields="name:string,email:string,password:string" ----- optional
     * --methods="index,getAll,store,update,delete,show,changeStatus,getMetaData"  ---- optional
     * always use {model} name is small case in singular word  ---- required
     * soft delete, extra, created_by, updated_by are set in model and migration by default
     *
     * to use modules path modules package should be installed
     * {module} name of module
     *
     * **/

    protected $signature = 'generate:crud {model} {--module=} {--disable=} {--fields=} {--methods=}';
    protected $description = 'Generate CRUD operations for a model with optional modules support';

    // Default features that can be generated by the command
    protected array $features = [
        'migration',
        'model',
        'create_request',
        'update_request',
        'list_resource',
        'detail_resource',
        'controller',
        'route',
    ];

    /**
     * Initialize the service classes via constructor injection.
     *
     * @param CrudService $crudService
     */
    public function __construct(
        protected CrudService $crudService,
    )
    {
        parent::__construct();
    }

    public function handle(): void
    {
        $name = Str::camel($this->argument('model')); // Get the model name in camelCase
        $module = $this->option('module'); // Get the module name if provided
        $pluralModel = Str::plural($name); // Pluralize the model name
        $fields = $this->option('fields') ? explode(',', $this->option('fields')) : []; // Get fields as an array
        $methods = $this->option('methods'); // Get custom methods if provided
        $disabledFeatures = array_map('trim', $this->option('disable') ? explode(',', $this->option('disable')) : []); // Get disabled features
        $enabledFeatures = array_diff($this->features, $disabledFeatures); // Calculate enabled features

        $this->info('Executing CRUD Command...'); // Log the start of the process
        $fields = FieldFormatHelper::removeGlobalDefaultFields($fields); // Remove default fields from the fields array

        // Check if the specified module exists
        if ($module && !is_dir(base_path("Modules/{$module}"))) {
            $this->error("Module '{$module}' does not exist.");
            return;
        }

        // Loop through each enabled feature and handle it
        foreach ($enabledFeatures as $feature) {
            $handlerMethod = 'handle' . Str::studly($feature); // Generate method name dynamically
            if (method_exists($this->crudService, $handlerMethod)) {
                $this->crudService->{$handlerMethod}($name, $pluralModel, $fields, $methods, $module);
            }
        }

        $this->info("CRUD Command executed successfully."); // Log the successful completion
    }
}
